fn keyboard_reset_system(
    keyboard_input: Res<Input<KeyCode>>,
    mut commands: Commands,
    query: Query<Entity, With<DroneAgent>>,
    mut meshes: ResMut<Assets<Mesh>>,
    mut materials: ResMut<Assets<StandardMaterial>>,
    target_query: Query<Entity, With<Target>>,
    mode: Res<ControlMode>,
    mut hover_settings: ResMut<HoverSettings>,
) {
    if keyboard_input.just_pressed(KeyCode::R) {
        println!("드론 리셋!");
        
        for entity in query.iter() {
            commands.entity(entity).despawn_recursive();
        }
        
        for entity in target_query.iter() {
            commands.entity(entity).despawn_recursive();
        }
        
        hover_settings.hover_height = 5.0;
        hover_settings.height_pid.reset();
        
        let drone_entity = spawn_keyboard_controlled_drone(&mut commands, &mut meshes, &mut materials, Vec3::new(0.0, 2.0, 0.0));
        
        if matches!(*mode, ControlMode::ReinforcementLearning) {
            commands.entity(drone_entity).insert(AgentMemory::default());
            println!("리셋된 드론에 AgentMemory 컴포넌트가 추가되었습니다.");
        }
        
        spawn_target(&mut commands, &mut meshes, &mut materials, Vec3::new(0.0, 5.0, 0.0));
    }
} 